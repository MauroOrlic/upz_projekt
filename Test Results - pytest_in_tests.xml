<?xml version="1.0" encoding="UTF-8"?><testrun duration="30851018" footerText="Generated by PyCharm on 1/16/20, 5:55 PM" name="pytest in tests">
    <count name="total" value="105"/>
    <count name="failed" value="16"/>
    <count name="passed" value="89"/>
    <config nameIsGenerated="true" configId="tests" name="pytest in tests">
        <module name="upz_projekt"/>
        <option name="INTERPRETER_OPTIONS" value=""/>
        <option name="PARENT_ENVS" value="true"/>
        <envs>
            <env name="WORKING_DIR_UPZ_PROJEKT" value="/home/mauro/Workspace/upz_projekt"/>
        </envs>
        <option name="SDK_HOME" value="/home/mauro/.virtualenvs/upz_projekt/bin/python"/>
        <option name="WORKING_DIRECTORY" value="/home/mauro/Workspace/upz_projekt"/>
        <option name="IS_MODULE_SDK" value="true"/>
        <option name="ADD_CONTENT_ROOTS" value="true"/>
        <option name="ADD_SOURCE_ROOTS" value="true"/>
        <option name="_new_keywords" value="&quot;&quot;"/>
        <option name="_new_additionalArguments" value="&quot;&quot;"/>
        <option name="_new_target" value="&quot;/home/mauro/Workspace/upz_projekt/tests&quot;"/>
        <option name="_new_targetType" value="&quot;PATH&quot;"/>
    </config>
    <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests" name="tests" status="failed">
        <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures" name="test_graph_measures" status="failed">
            <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties" name="TestGraphProperties" status="failed">
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_basic_measures" name="test_basic_measures" status="passed">
                    <test duration="582" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_basic_measures." name="(openflights)" metainfo="test_basic_measures[openflights]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[power] 
[gw1] [  0%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[power] 
tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[roadmap_pa] 
[gw0] [  1%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[openflights] 
</output>
                    </test>
                    <test duration="191" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_basic_measures." name="(power)" metainfo="test_basic_measures[power]" status="passed"/>
                    <test duration="48304" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_basic_measures." name="(roadmap_pa)" metainfo="test_basic_measures[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[roadnet_ca] 
[gw1] [  2%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[roadmap_pa] 
</output>
                    </test>
                    <test duration="87213" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_basic_measures." name="(roadnet_ca)" metainfo="test_basic_measures[roadnet_ca]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_node_count[openflights] 
[gw1] [  3%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="59" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_basic_measures." name="(usair97)" metainfo="test_basic_measures[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count" name="test_node_count" status="passed">
                    <test duration="508" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(openflights)" metainfo="test_node_count[openflights]" status="passed"/>
                    <test duration="81090" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(roadnet_ca)" metainfo="test_node_count[roadnet_ca]" status="passed">
                        <output type="stdout">[gw0] [  4%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[usair97] 
[gw0] [  5%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_basic_measures[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_node_count[power] 
[gw0] [  6%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadmap_pa] 
[gw1] [  7%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="186" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(power)" metainfo="test_node_count[power]" status="passed"/>
                    <test duration="44733" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(roadmap_pa)" metainfo="test_node_count[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_node_count[usair97] 
[gw1] [  8%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_edge_count[power] 
[gw1] [  9%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadmap_pa] 
[gw0] [ 10%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadmap_pa] 
</output>
                    </test>
                    <test duration="50" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(usair97)" metainfo="test_node_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count" name="test_edge_count" status="passed">
                    <test duration="178" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(power)" metainfo="test_edge_count[power]" status="passed"/>
                    <test duration="45378" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(roadmap_pa)" metainfo="test_edge_count[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_edge_count[openflights] 
[gw0] [ 11%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadnet_ca] 
[gw1] [ 12%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadmap_pa] 
</output>
                    </test>
                    <test duration="515" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(openflights)" metainfo="test_edge_count[openflights]" status="passed"/>
                    <test duration="81226" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(roadnet_ca)" metainfo="test_edge_count[roadnet_ca]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="54" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(usair97)" metainfo="test_edge_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count" name="test_avg_edge_count" status="passed">
                    <test duration="523" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(openflights)" metainfo="test_avg_edge_count[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 13%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[openflights] 
</output>
                    </test>
                    <test duration="84948" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(roadnet_ca)" metainfo="test_avg_edge_count[roadnet_ca]" status="passed">
                        <output type="stdout">[gw0] [ 14%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_edge_count[usair97] 
[gw0] [ 15%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[power] 
[gw0] [ 16%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadmap_pa] 
[gw0] [ 17%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[openflights] 
[gw0] [ 18%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadnet_ca] 
[gw1] [ 19%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="180" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(power)" metainfo="test_avg_edge_count[power]" status="passed"/>
                    <test duration="45818" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(roadmap_pa)" metainfo="test_avg_edge_count[roadmap_pa]" status="passed"/>
                    <test duration="53" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(usair97)" metainfo="test_avg_edge_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength" name="test_avg_strength" status="passed">
                    <test duration="544" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(openflights)" metainfo="test_avg_strength[openflights]" status="passed"/>
                    <test duration="81970" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(roadnet_ca)" metainfo="test_avg_strength[roadnet_ca]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[usair97] 
[gw1] [ 20%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[power] 
[gw1] [ 20%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadmap_pa] 
[gw1] [ 21%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="176" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(power)" metainfo="test_avg_strength[power]" status="passed"/>
                    <test duration="43795" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(roadmap_pa)" metainfo="test_avg_strength[roadmap_pa]" status="passed"/>
                    <test duration="53" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(usair97)" metainfo="test_avg_strength[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count" name="test_component_count" status="passed">
                    <test duration="569" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(openflights)" metainfo="test_component_count[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 22%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[openflights] 
</output>
                    </test>
                    <test duration="178" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(power)" metainfo="test_component_count[power]" status="passed">
                        <output type="stdout">[gw1] [ 23%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[power] 
</output>
                    </test>
                    <test duration="89071" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(roadnet_ca)" metainfo="test_component_count[roadnet_ca]" status="passed">
                        <output type="stdout">[gw0] [ 24%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[usair97] 
[gw0] [ 25%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadnet_ca] 
[gw1] [ 26%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="46044" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(roadmap_pa)" metainfo="test_component_count[roadmap_pa]" status="passed"/>
                    <test duration="55" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(usair97)" metainfo="test_component_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length" name="test_shortest_path_length" status="failed">
                    <test duration="3600005" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(roadnet_ca)" metainfo="test_shortest_path_length[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadmap_pa] 
[gw1] [ 27%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[usair97] 
[gw1] [ 28%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[openflights] 
[gw1] [ 29%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[power] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[power] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[usair97] 
[gw1] [ 36%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[openflights] 
[gw1] [ 37%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[power] 
[gw1] [ 38%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[power] 
tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:148 (TestGraphProperties.test_shortest_path_length[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd3bb7a8e90&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_shortest_path_length(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.shortest_path_length, (int, float))
tests/test_graph_measures.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:208: in shortest_path_length
    self._shortest_path_length = average_shortest_path_length(largest_component)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in average_shortest_path_length
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in &amp;lt;genexpr&amp;gt;
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:410: in path_length
    return nx.single_source_shortest_path_length(G, v)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: in __iter__
    yield from self._mapping
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AtlasView({&amp;#39;1736412&amp;#39;: {}, &amp;#39;1736410&amp;#39;: {}, &amp;#39;1736424&amp;#39;: {}})
&amp;gt;   def __iter__(self):
E   Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:50: Failed
</output>
                    </test>
                    <test duration="48561" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(openflights)" metainfo="test_shortest_path_length[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 34%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[openflights] 
</output>
                    </test>
                    <test duration="77287" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(power)" metainfo="test_shortest_path_length[power]" status="passed">
                        <output type="stdout">[gw1] [ 35%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[power] 
</output>
                    </test>
                    <test duration="3600005" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(roadmap_pa)" metainfo="test_shortest_path_length[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadmap_pa] 
[gw0] [ 40%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:148 (TestGraphProperties.test_shortest_path_length[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd3be3ea690&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_shortest_path_length(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.shortest_path_length, (int, float))
tests/test_graph_measures.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:208: in shortest_path_length
    self._shortest_path_length = average_shortest_path_length(largest_component)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in average_shortest_path_length
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in &amp;lt;genexpr&amp;gt;
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:410: in path_length
    return nx.single_source_shortest_path_length(G, v)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;238248&amp;#39;: {}, &amp;#39;238245&amp;#39;: {}, &amp;#39;254403&amp;#39;: {}}))
    def __iter__(self):
&amp;gt;       yield from self._mapping
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: Failed
</output>
                    </test>
                    <test duration="667" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(usair97)" metainfo="test_shortest_path_length[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_measures" name="test_largest_component_measures" status="passed">
                    <test duration="726" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_measures." name="(openflights)" metainfo="test_largest_component_measures[openflights]" status="passed"/>
                    <test duration="179" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_measures." name="(power)" metainfo="test_largest_component_measures[power]" status="passed">
                        <output type="stdout">[gw1] [ 30%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[power] 
</output>
                    </test>
                    <test duration="87670" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_measures." name="(roadnet_ca)" metainfo="test_largest_component_measures[roadnet_ca]" status="passed">
                        <output type="stdout">[gw1] [ 31%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[roadnet_ca] 
</output>
                    </test>
                    <test duration="45458" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_measures." name="(roadmap_pa)" metainfo="test_largest_component_measures[roadmap_pa]" status="passed">
                        <output type="stdout">[gw1] [ 32%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[roadmap_pa] 
</output>
                    </test>
                    <test duration="50" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_measures." name="(usair97)" metainfo="test_largest_component_measures[usair97]" status="passed">
                        <output type="stdout">[gw1] [ 33%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_measures[usair97] 
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity" name="test_eccentricity" status="failed">
                    <test duration="638" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(usair97)" metainfo="test_eccentricity[usair97]" status="passed"/>
                    <test duration="48782" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(openflights)" metainfo="test_eccentricity[openflights]" status="passed"/>
                    <test duration="80149" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(power)" metainfo="test_eccentricity[power]" status="passed"/>
                    <test duration="3600011" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(roadnet_ca)" metainfo="test_eccentricity[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[usair97] 
[gw1] [ 79%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[openflights] 
[gw1] [ 80%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[power] 
[gw1] [ 80%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[power] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadnet_ca] 
[gw0] [ 81%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:170 (TestGraphProperties.test_eccentricity[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd439d68a10&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_eccentricity(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.eccentricity, (int, float))
tests/test_graph_measures.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:239: in eccentricity
    self._eccentricity = max(eccentricity(largest_component).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;192161&amp;#39;: {}}))
&amp;gt;   def __iter__(self):
E   Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:719: Failed
</output>
                    </test>
                    <test duration="3600010" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(roadmap_pa)" metainfo="test_eccentricity[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:170 (TestGraphProperties.test_eccentricity[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd3ab12d490&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_eccentricity(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.eccentricity, (int, float))
tests/test_graph_measures.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:239: in eccentricity
    self._eccentricity = max(eccentricity(largest_component).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;979353&amp;#39;: {}, &amp;#39;979355&amp;#39;: {}, &amp;#39;979423&amp;#39;: {}, &amp;#39;979424&amp;#39;: {}}))
    def __iter__(self):
&amp;gt;       yield from self._mapping
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: Failed
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency" name="test_global_efficiency" status="failed">
                    <test duration="46017" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(openflights)" metainfo="test_global_efficiency[openflights]" status="passed"/>
                    <test duration="79172" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(power)" metainfo="test_global_efficiency[power]" status="passed"/>
                    <test duration="3600002" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(roadnet_ca)" metainfo="test_global_efficiency[roadnet_ca]" status="failed">
                        <output type="stdout">[gw0] [ 39%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadmap_pa] 
[gw1] [ 40%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:181 (TestGraphProperties.test_global_efficiency[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fef4f3094d0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_global_efficiency(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.global_efficiency, float)
tests/test_graph_measures.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:249: in global_efficiency
    self._global_efficiency = global_efficiency(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-302&amp;gt;:2: in global_efficiency
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/efficiency_measures.py:104: in global_efficiency
    for source, targets in lengths:
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:186: in all_pairs_shortest_path_length
    yield (n, length(G, n, cutoff=cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;855177&amp;#39;: {}, &amp;#39;855219&amp;#39;: {}, &amp;#39;855220&amp;#39;: {}, &amp;#39;855221&amp;#39;: {}}))
    def __iter__(self):
&amp;gt;       yield from self._mapping
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: Failed
</output>
                    </test>
                    <test duration="3600003" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(roadmap_pa)" metainfo="test_global_efficiency[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[usair97] 
[gw0] [ 41%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[openflights] 
[gw0] [ 42%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_diameter[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[power] 
[gw0] [ 43%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_diameter[power] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadnet_ca] 
[gw1] [ 44%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:181 (TestGraphProperties.test_global_efficiency[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fef780ed510&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_global_efficiency(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.global_efficiency, float)
tests/test_graph_measures.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:249: in global_efficiency
    self._global_efficiency = global_efficiency(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-302&amp;gt;:2: in global_efficiency
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/efficiency_measures.py:104: in global_efficiency
    for source, targets in lengths:
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:186: in all_pairs_shortest_path_length
    yield (n, length(G, n, cutoff=cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;268531&amp;#39;: {}, &amp;#39;275573&amp;#39;: {}, &amp;#39;275581&amp;#39;: {}, &amp;#39;275582&amp;#39;: {}, &amp;#39;282065&amp;#39;: {}}))
    def __iter__(self):
&amp;gt;       yield from self._mapping
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: Failed
</output>
                    </test>
                    <test duration="625" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(usair97)" metainfo="test_global_efficiency[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter" name="test_diameter" status="failed">
                    <test duration="48960" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(openflights)" metainfo="test_diameter[openflights]" status="passed"/>
                    <test duration="80542" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(power)" metainfo="test_diameter[power]" status="passed"/>
                    <test duration="3600015" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(roadnet_ca)" metainfo="test_diameter[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[usair97] 
[gw1] [ 45%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[openflights] 
[gw1] [ 46%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[power] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadnet_ca] 
[gw1] [ 53%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadmap_pa] 
[gw1] [ 54%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[usair97] 
[gw1] [ 55%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[power] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[power] 
[gw1] [ 61%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[power] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[roadnet_ca] 
[gw1] [ 62%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[roadmap_pa] 
[gw1] [ 63%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[usair97] 
[gw1] [ 64%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[power] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[openflights] 
[gw1] [ 70%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[power] 
[gw1] [ 71%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[power] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadnet_ca] 
[gw0] [ 72%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:159 (TestGraphProperties.test_diameter[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd401d1fad0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_diameter(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.diameter, int)
tests/test_graph_measures.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:223: in diameter
    self._diameter = diameter(largest_component)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:281: in diameter
    e = eccentricity(G)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
adj = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;7&amp;#39;: {}, &amp;#39;383&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;3&amp;#39;: {}, &amp;#39;467&amp;#39;: {}}, &amp;#39;3&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;4&amp;#39;: {}}, &amp;#39;467&amp;#39;:...: {}}, &amp;#39;1956988&amp;#39;: {&amp;#39;1956986&amp;#39;: {}}, &amp;#39;1956998&amp;#39;: {&amp;#39;1956997&amp;#39;: {}}, &amp;#39;1957016&amp;#39;: {&amp;#39;1957015&amp;#39;: {}}, &amp;#39;1957024&amp;#39;: {&amp;#39;1957023&amp;#39;: {}}})
firstlevel = {&amp;#39;241&amp;#39;: 1}, cutoff = inf
    def _single_shortest_path_length(adj, firstlevel, cutoff):
        &amp;quot;&amp;quot;&amp;quot;Yields (node, level) in a breadth first search
    
        Shortest Path Length helper function
        Parameters
        ----------
            adj : dict
                Adjacency dict or view
            firstlevel : dict
                starting nodes, e.g. {source: 1} or {target: 1}
            cutoff : int or float
                level at which we stop the process
        &amp;quot;&amp;quot;&amp;quot;
        seen = {}                  # level (number of hops) when seen in BFS
        level = 0                  # the current level
        nextlevel = firstlevel     # dict of nodes to check at next level
    
        while nextlevel and cutoff &amp;gt;= level:
            thislevel = nextlevel  # advance to next level
            nextlevel = {}         # and start a new list (fringe)
            for v in thislevel:
                if v not in seen:
                    seen[v] = level  # set the level of vertex v
                    nextlevel.update(adj[v])  # add neighbors of v
&amp;gt;                   yield (v, level)
E                   Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:93: Failed
</output>
                    </test>
                    <test duration="3600011" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(roadmap_pa)" metainfo="test_diameter[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:159 (TestGraphProperties.test_diameter[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd3b9f7a390&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_diameter(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.diameter, int)
tests/test_graph_measures.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:223: in diameter
    self._diameter = diameter(largest_component)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:281: in diameter
    e = eccentricity(G)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
adj = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;6299&amp;#39;: {}, &amp;#39;6343&amp;#39;: {}}, &amp;#39;6299&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;6300&amp;#39;: {}, &amp;#39;6334&amp;#39;: {}}, &amp;#39;634...: {}}, &amp;#39;1087535&amp;#39;: {&amp;#39;1087534&amp;#39;: {}}, &amp;#39;1087544&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087545&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087546&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}})
firstlevel = {&amp;#39;4641&amp;#39;: 1}, cutoff = inf
    def _single_shortest_path_length(adj, firstlevel, cutoff):
        &amp;quot;&amp;quot;&amp;quot;Yields (node, level) in a breadth first search
    
        Shortest Path Length helper function
        Parameters
        ----------
            adj : dict
                Adjacency dict or view
            firstlevel : dict
                starting nodes, e.g. {source: 1} or {target: 1}
            cutoff : int or float
                level at which we stop the process
        &amp;quot;&amp;quot;&amp;quot;
        seen = {}                  # level (number of hops) when seen in BFS
        level = 0                  # the current level
        nextlevel = firstlevel     # dict of nodes to check at next level
    
        while nextlevel and cutoff &amp;gt;= level:
            thislevel = nextlevel  # advance to next level
            nextlevel = {}         # and start a new list (fringe)
            for v in thislevel:
                if v not in seen:
                    seen[v] = level  # set the level of vertex v
&amp;gt;                   nextlevel.update(adj[v])  # add neighbors of v
E                   Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: Failed
</output>
                    </test>
                    <test duration="650" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(usair97)" metainfo="test_diameter[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient" name="test_global_clustering_coefficient" status="passed">
                    <test duration="1066" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(openflights)" metainfo="test_global_clustering_coefficient[openflights]" status="passed"/>
                    <test duration="298" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(power)" metainfo="test_global_clustering_coefficient[power]" status="passed">
                        <output type="stdout">[gw1] [ 47%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[power] 
</output>
                    </test>
                    <test duration="136682" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(roadnet_ca)" metainfo="test_global_clustering_coefficient[roadnet_ca]" status="passed">
                        <output type="stdout">[gw1] [ 48%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadnet_ca] 
</output>
                    </test>
                    <test duration="72273" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(roadmap_pa)" metainfo="test_global_clustering_coefficient[roadmap_pa]" status="passed">
                        <output type="stdout">[gw1] [ 49%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadmap_pa] 
</output>
                    </test>
                    <test duration="111" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(usair97)" metainfo="test_global_clustering_coefficient[usair97]" status="passed">
                        <output type="stdout">[gw1] [ 50%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[usair97] 
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient" name="test_avg_clustering_coefficient" status="passed">
                    <test duration="1434" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(openflights)" metainfo="test_avg_clustering_coefficient[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 51%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[openflights] 
</output>
                    </test>
                    <test duration="241" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(power)" metainfo="test_avg_clustering_coefficient[power]" status="passed">
                        <output type="stdout">[gw1] [ 52%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[power] 
</output>
                    </test>
                    <test duration="104660" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(roadnet_ca)" metainfo="test_avg_clustering_coefficient[roadnet_ca]" status="passed"/>
                    <test duration="58860" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(roadmap_pa)" metainfo="test_avg_clustering_coefficient[roadmap_pa]" status="passed"/>
                    <test duration="81" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(usair97)" metainfo="test_avg_clustering_coefficient[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity" name="test_degree_assortativity" status="passed">
                    <test duration="597" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(openflights)" metainfo="test_degree_assortativity[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 56%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[openflights] 
</output>
                    </test>
                    <test duration="237" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(power)" metainfo="test_degree_assortativity[power]" status="passed">
                        <output type="stdout">[gw1] [ 57%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[power] 
</output>
                    </test>
                    <test duration="110387" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(roadnet_ca)" metainfo="test_degree_assortativity[roadnet_ca]" status="passed">
                        <output type="stdout">[gw1] [ 58%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadnet_ca] 
</output>
                    </test>
                    <test duration="59249" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(roadmap_pa)" metainfo="test_degree_assortativity[roadmap_pa]" status="passed">
                        <output type="stdout">[gw1] [ 59%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadmap_pa] 
</output>
                    </test>
                    <test duration="64" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(usair97)" metainfo="test_degree_assortativity[usair97]" status="passed">
                        <output type="stdout">[gw1] [ 60%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[usair97] 
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_distribution" name="test_degree_distribution" status="passed">
                    <test duration="497" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_distribution." name="(openflights)" metainfo="test_degree_distribution[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 60%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_distribution[openflights] 
</output>
                    </test>
                    <test duration="172" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_distribution." name="(power)" metainfo="test_degree_distribution[power]" status="passed"/>
                    <test duration="80437" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_distribution." name="(roadnet_ca)" metainfo="test_degree_distribution[roadnet_ca]" status="passed"/>
                    <test duration="42564" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_distribution." name="(roadmap_pa)" metainfo="test_degree_distribution[roadmap_pa]" status="passed"/>
                    <test duration="50" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_distribution." name="(usair97)" metainfo="test_degree_distribution[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree" name="test_top10_central_degree" status="passed">
                    <test duration="515" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(openflights)" metainfo="test_top10_central_degree[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 65%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[openflights] 
</output>
                    </test>
                    <test duration="177" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(power)" metainfo="test_top10_central_degree[power]" status="passed">
                        <output type="stdout">[gw1] [ 66%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[power] 
</output>
                    </test>
                    <test duration="81933" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(roadnet_ca)" metainfo="test_top10_central_degree[roadnet_ca]" status="passed">
                        <output type="stdout">[gw1] [ 67%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadnet_ca] 
</output>
                    </test>
                    <test duration="42238" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(roadmap_pa)" metainfo="test_top10_central_degree[roadmap_pa]" status="passed">
                        <output type="stdout">[gw1] [ 68%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadmap_pa] 
</output>
                    </test>
                    <test duration="51" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(usair97)" metainfo="test_top10_central_degree[usair97]" status="passed">
                        <output type="stdout">[gw1] [ 69%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[usair97] 
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness" name="test_top10_central_betweenness" status="failed">
                    <test duration="48406" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(openflights)" metainfo="test_top10_central_betweenness[openflights]" status="passed"/>
                    <test duration="99790" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(power)" metainfo="test_top10_central_betweenness[power]" status="passed"/>
                    <test duration="3599999" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(roadnet_ca)" metainfo="test_top10_central_betweenness[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadmap_pa] 
[gw1] [ 73%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:268 (TestGraphProperties.test_top10_central_betweenness[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fef69615fd0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_betweenness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       bc = measures.top10_central_betweenness
tests/test_graph_measures.py:278: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:301: in top10_central_betweenness
    bc = betweenness_centrality(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:136: in betweenness_centrality
    S, P, sigma = _single_source_shortest_path_basic(G, s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.graph.Graph object at 0x7fef74dcabd0&amp;gt;, s = &amp;#39;122&amp;#39;
    def _single_source_shortest_path_basic(G, s):
        S = []
        P = {}
        for v in G:
            P[v] = []
        sigma = dict.fromkeys(G, 0.0)    # sigma[v]=0 for v in G
        D = {}
        sigma[s] = 1.0
        D[s] = 0
        Q = [s]
        while Q:   # use BFS to find shortest paths
            v = Q.pop(0)
            S.append(v)
            Dv = D[v]
            sigmav = sigma[v]
            for w in G[v]:
&amp;gt;               if w not in D:
E               Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:265: Failed
</output>
                    </test>
                    <test duration="3600051" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(roadmap_pa)" metainfo="test_top10_central_betweenness[roadmap_pa]" status="failed">
                        <output type="stdout">[gw0] [ 74%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[usair97] 
[gw0] [ 75%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_diameter[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[openflights] 
[gw0] [ 76%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[power] 
[gw0] [ 77%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[power] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadnet_ca] 
[gw1] [ 78%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:268 (TestGraphProperties.test_top10_central_betweenness[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fef74e89510&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_betweenness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       bc = measures.top10_central_betweenness
tests/test_graph_measures.py:278: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:301: in top10_central_betweenness
    bc = betweenness_centrality(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:136: in betweenness_centrality
    S, P, sigma = _single_source_shortest_path_basic(G, s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.graph.Graph object at 0x7fefe62d3f90&amp;gt;, s = &amp;#39;266&amp;#39;
    def _single_source_shortest_path_basic(G, s):
        S = []
        P = {}
        for v in G:
            P[v] = []
&amp;gt;       sigma = dict.fromkeys(G, 0.0)    # sigma[v]=0 for v in G
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:254: Failed
</output>
                    </test>
                    <test duration="624" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(usair97)" metainfo="test_top10_central_betweenness[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness" name="test_top10_central_closeness" status="failed">
                    <test duration="40538" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(openflights)" metainfo="test_top10_central_closeness[openflights]" status="passed"/>
                    <test duration="77489" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(power)" metainfo="test_top10_central_closeness[power]" status="passed"/>
                    <test duration="3600024" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(roadnet_ca)" metainfo="test_top10_central_closeness[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadmap_pa] 
[gw1] [ 82%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:284 (TestGraphProperties.test_top10_central_closeness[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fefe772e9d0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_closeness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       cc = measures.top10_central_closeness
tests/test_graph_measures.py:294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:309: in top10_central_closeness
    cc = closeness_centrality(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;1258579&amp;#39;: {}}))
    def __iter__(self):
&amp;gt;       yield from self._mapping
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: Failed
</output>
                    </test>
                    <test duration="3600014" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(roadmap_pa)" metainfo="test_top10_central_closeness[roadmap_pa]" status="failed">
                        <output type="stdout">[gw0] [ 83%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[openflights] 
[gw0] [ 84%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[power] 
[gw0] [ 85%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadnet_ca] 
[gw1] [ 86%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:284 (TestGraphProperties.test_top10_central_closeness[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fef74ed46d0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_closeness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       cc = measures.top10_central_closeness
tests/test_graph_measures.py:294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:309: in top10_central_closeness
    cc = closeness_centrality(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;33646&amp;#39;: {}, &amp;#39;33648&amp;#39;: {}, &amp;#39;33813&amp;#39;: {}}))
    def __iter__(self):
&amp;gt;       yield from self._mapping
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: Failed
</output>
                    </test>
                    <test duration="611" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(usair97)" metainfo="test_top10_central_closeness[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality" name="test_avg_closeness_centrality" status="failed">
                    <test duration="41375" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(openflights)" metainfo="test_avg_closeness_centrality[openflights]" status="passed"/>
                    <test duration="78899" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(power)" metainfo="test_avg_closeness_centrality[power]" status="passed"/>
                    <test duration="3600021" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(roadnet_ca)" metainfo="test_avg_closeness_centrality[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[usair97] 
[gw1] [ 87%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[usair97] 
[gw1] [ 88%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[openflights] 
[gw1] [ 89%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[power] 
[gw1] [ 90%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[roadnet_ca] 
[gw0] [ 91%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:300 (TestGraphProperties.test_avg_closeness_centrality[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd41827b850&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_closeness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_closeness_centrality, float)
tests/test_graph_measures.py:310: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:317: in avg_closeness_centrality
    self._avg_closeness_centrality = mean([centrality for centrality in closeness_centrality(self.graph).values()])
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;7&amp;#39;: {}, &amp;#39;383&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;3&amp;#39;: {}, &amp;#39;467&amp;#39;: {}}, &amp;#39;3&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;4&amp;#39;: {}}, &amp;#39;467&amp;#39;:...: {}}, &amp;#39;1956988&amp;#39;: {&amp;#39;1956986&amp;#39;: {}}, &amp;#39;1956998&amp;#39;: {&amp;#39;1956997&amp;#39;: {}}, &amp;#39;1957016&amp;#39;: {&amp;#39;1957015&amp;#39;: {}}, &amp;#39;1957024&amp;#39;: {&amp;#39;1957023&amp;#39;: {}}})
name = &amp;#39;1350641&amp;#39;
    def __getitem__(self, name):
&amp;gt;       return AtlasView(self._atlas[name])
E       Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:81: Failed
</output>
                    </test>
                    <test duration="614" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(usair97)" metainfo="test_avg_closeness_centrality[usair97]" status="passed"/>
                    <test duration="3600007" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(roadmap_pa)" metainfo="test_avg_closeness_centrality[roadmap_pa]" status="failed">
                        <output type="stdout">[gw1] [ 92%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[roadmap_pa] 
[gw0] [ 93%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:300 (TestGraphProperties.test_avg_closeness_centrality[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fd3ab1f5a90&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_closeness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_closeness_centrality, float)
tests/test_graph_measures.py:310: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:317: in avg_closeness_centrality
    self._avg_closeness_centrality = mean([centrality for centrality in closeness_centrality(self.graph).values()])
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
adj = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;6299&amp;#39;: {}, &amp;#39;6343&amp;#39;: {}}, &amp;#39;6299&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;6300&amp;#39;: {}, &amp;#39;6334&amp;#39;: {}}, &amp;#39;634...: {}}, &amp;#39;1087535&amp;#39;: {&amp;#39;1087534&amp;#39;: {}}, &amp;#39;1087544&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087545&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087546&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}})
firstlevel = {&amp;#39;8776&amp;#39;: 1}, cutoff = inf
    def _single_shortest_path_length(adj, firstlevel, cutoff):
        &amp;quot;&amp;quot;&amp;quot;Yields (node, level) in a breadth first search
    
        Shortest Path Length helper function
        Parameters
        ----------
            adj : dict
                Adjacency dict or view
            firstlevel : dict
                starting nodes, e.g. {source: 1} or {target: 1}
            cutoff : int or float
                level at which we stop the process
        &amp;quot;&amp;quot;&amp;quot;
        seen = {}                  # level (number of hops) when seen in BFS
        level = 0                  # the current level
        nextlevel = firstlevel     # dict of nodes to check at next level
    
        while nextlevel and cutoff &amp;gt;= level:
            thislevel = nextlevel  # advance to next level
            nextlevel = {}         # and start a new list (fringe)
            for v in thislevel:
&amp;gt;               if v not in seen:
E               Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:90: Failed
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality" name="test_avg_betweenness_centrality" status="failed">
                    <test duration="54272" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(openflights)" metainfo="test_avg_betweenness_centrality[openflights]" status="passed"/>
                    <test duration="100028" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(power)" metainfo="test_avg_betweenness_centrality[power]" status="passed"/>
                    <test duration="3599999" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(roadnet_ca)" metainfo="test_avg_betweenness_centrality[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:311 (TestGraphProperties.test_avg_betweenness_centrality[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fef861f6e50&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_betweenness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_betweenness_centrality, float)
tests/test_graph_measures.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:324: in avg_betweenness_centrality
    self._avg_betweenness_centrality = mean([centrality for centrality in betweenness_centrality(self.graph).values()])
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:143: in betweenness_centrality
    betweenness = _accumulate_basic(betweenness, S, P, sigma, s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
betweenness = {&amp;#39;1&amp;#39;: 6665959.751477329, &amp;#39;10&amp;#39;: 20576268.98186562, &amp;#39;100&amp;#39;: 2947526.4884495754, &amp;#39;1000&amp;#39;: 0.0, ...}
S = [&amp;#39;120&amp;#39;, &amp;#39;115&amp;#39;, &amp;#39;121&amp;#39;, &amp;#39;170&amp;#39;, &amp;#39;171&amp;#39;, &amp;#39;116&amp;#39;, ...]
P = {&amp;#39;1&amp;#39;: [&amp;#39;2&amp;#39;], &amp;#39;10&amp;#39;: [&amp;#39;8&amp;#39;], &amp;#39;100&amp;#39;: [&amp;#39;103&amp;#39;, &amp;#39;99&amp;#39;], &amp;#39;1000&amp;#39;: [&amp;#39;976&amp;#39;], ...}
sigma = {&amp;#39;1&amp;#39;: 1.0, &amp;#39;10&amp;#39;: 1.0, &amp;#39;100&amp;#39;: 6840.0, &amp;#39;1000&amp;#39;: 4.0, ...}, s = &amp;#39;120&amp;#39;
    def _accumulate_basic(betweenness, S, P, sigma, s):
        delta = dict.fromkeys(S, 0)
        while S:
            w = S.pop()
            coeff = (1 + delta[w]) / sigma[w]
&amp;gt;           for v in P[w]:
E           Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:314: Failed
</output>
                    </test>
                    <test duration="3599999" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(roadmap_pa)" metainfo="test_avg_betweenness_centrality[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[usair97] 
[gw0] [ 94%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[usair97] 
tests/test_utils.py::TestGraphIO::test_load_power 
[gw0] [ 95%] PASSED tests/test_utils.py::TestGraphIO::test_load_power 
tests/test_utils.py::TestGraphIO::test_load_roadnet_ca 
[gw0] [ 96%] PASSED tests/test_utils.py::TestGraphIO::test_load_roadnet_ca 
tests/test_utils.py::TestGraphIO::test_load_roadnet_pa 
[gw0] [ 97%] PASSED tests/test_utils.py::TestGraphIO::test_load_roadnet_pa 
tests/test_utils.py::TestGraphIO::test_load_usair97 
[gw0] [ 98%] PASSED tests/test_utils.py::TestGraphIO::test_load_usair97 
[gw1] [ 99%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:311 (TestGraphProperties.test_avg_betweenness_centrality[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7fef779ac310&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_betweenness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_betweenness_centrality, float)
tests/test_graph_measures.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:324: in avg_betweenness_centrality
    self._avg_betweenness_centrality = mean([centrality for centrality in betweenness_centrality(self.graph).values()])
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:143: in betweenness_centrality
    betweenness = _accumulate_basic(betweenness, S, P, sigma, s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
betweenness = {&amp;#39;1&amp;#39;: 1284473.664117796, &amp;#39;10&amp;#39;: 2667844.480780213, &amp;#39;100&amp;#39;: 4351561.388078173, &amp;#39;1000&amp;#39;: 0.0, ...}
S = [&amp;#39;258&amp;#39;, &amp;#39;298&amp;#39;, &amp;#39;256&amp;#39;, &amp;#39;10701&amp;#39;, &amp;#39;92&amp;#39;, &amp;#39;91&amp;#39;, ...]
P = {&amp;#39;1&amp;#39;: [&amp;#39;6299&amp;#39;], &amp;#39;10&amp;#39;: [&amp;#39;13&amp;#39;], &amp;#39;100&amp;#39;: [&amp;#39;88&amp;#39;], &amp;#39;1000&amp;#39;: [&amp;#39;816&amp;#39;], ...}
sigma = {&amp;#39;1&amp;#39;: 6.0, &amp;#39;10&amp;#39;: 2.0, &amp;#39;100&amp;#39;: 3.0, &amp;#39;1000&amp;#39;: 9.0, ...}, s = &amp;#39;258&amp;#39;
    def _accumulate_basic(betweenness, S, P, sigma, s):
        delta = dict.fromkeys(S, 0)
        while S:
            w = S.pop()
&amp;gt;           coeff = (1 + delta[w]) / sigma[w]
E           Failed: Timeout &amp;gt;3600.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:313: Failed
</output>
                    </test>
                    <test duration="624" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(usair97)" metainfo="test_avg_betweenness_centrality[usair97]" status="passed"/>
                </suite>
            </suite>
        </suite>
        <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils" name="test_utils" status="passed">
            <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO" name="TestGraphIO" status="passed">
                <test duration="124" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_power" name="test_load_power" metainfo="test_load_power" status="passed"/>
                <test duration="57913" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_roadnet_ca" name="test_load_roadnet_ca" metainfo="test_load_roadnet_ca" status="passed"/>
                <test duration="29785" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_roadnet_pa" name="test_load_roadnet_pa" metainfo="test_load_roadnet_pa" status="passed"/>
                <test duration="58" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_usair97" name="test_load_usair97" metainfo="test_load_usair97" status="passed"/>
                <test duration="379" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_openflights" name="test_load_openflights" metainfo="test_load_openflights" status="passed">
                    <output type="stdout">[gw1] [100%] PASSED tests/test_utils.py::TestGraphIO::test_load_openflights 
</output>
                </test>
            </suite>
        </suite>
    </suite>
</testrun>
