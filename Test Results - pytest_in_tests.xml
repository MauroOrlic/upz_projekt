<?xml version="1.0" encoding="UTF-8"?><testrun duration="9301256" footerText="Generated by PyCharm on 1/15/20, 8:47 PM" name="pytest in tests">
    <count name="total" value="100"/>
    <count name="failed" value="21"/>
    <count name="passed" value="79"/>
    <config nameIsGenerated="true" configId="tests" name="pytest in tests">
        <module name="upz_projekt"/>
        <option name="INTERPRETER_OPTIONS" value=""/>
        <option name="PARENT_ENVS" value="true"/>
        <envs>
            <env name="WORKING_DIR_UPZ_PROJEKT" value="/home/mauro/Workspace/upz_projekt"/>
        </envs>
        <option name="SDK_HOME" value="/home/mauro/.virtualenvs/upz_projekt/bin/python"/>
        <option name="WORKING_DIRECTORY" value="/home/mauro/Workspace/upz_projekt"/>
        <option name="IS_MODULE_SDK" value="true"/>
        <option name="ADD_CONTENT_ROOTS" value="true"/>
        <option name="ADD_SOURCE_ROOTS" value="true"/>
        <option name="_new_keywords" value="&quot;&quot;"/>
        <option name="_new_additionalArguments" value="&quot;&quot;"/>
        <option name="_new_target" value="&quot;/home/mauro/Workspace/upz_projekt/tests&quot;"/>
        <option name="_new_targetType" value="&quot;PATH&quot;"/>
    </config>
    <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests" name="tests" status="failed">
        <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures" name="test_graph_measures" status="failed">
            <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties" name="TestGraphProperties" status="failed">
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count" name="test_node_count" status="passed">
                    <test duration="565" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(openflights)" metainfo="test_node_count[openflights]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_node_count[power] 
[gw1] [  1%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadmap_pa] 
[gw0] [  2%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[openflights] 
</output>
                    </test>
                    <test duration="174" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(power)" metainfo="test_node_count[power]" status="passed"/>
                    <test duration="43655" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(roadmap_pa)" metainfo="test_node_count[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadnet_ca] 
[gw1] [  3%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadmap_pa] 
</output>
                    </test>
                    <test duration="79838" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(roadnet_ca)" metainfo="test_node_count[roadnet_ca]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_edge_count[openflights] 
[gw1] [  4%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="61" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_node_count." name="(usair97)" metainfo="test_node_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count" name="test_edge_count" status="passed">
                    <test duration="483" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(openflights)" metainfo="test_edge_count[openflights]" status="passed"/>
                    <test duration="78948" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(roadnet_ca)" metainfo="test_edge_count[roadnet_ca]" status="passed">
                        <output type="stdout">[gw0] [  5%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_node_count[usair97] 
[gw0] [  6%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_node_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_edge_count[power] 
[gw0] [  7%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadmap_pa] 
[gw1] [  8%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadnet_ca] 
</output>
                    </test>
                    <test duration="173" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(power)" metainfo="test_edge_count[power]" status="passed"/>
                    <test duration="43347" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(roadmap_pa)" metainfo="test_edge_count[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_edge_count[usair97] 
[gw1] [  9%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[power] 
[gw1] [ 10%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadmap_pa] 
[gw0] [ 11%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_edge_count[roadmap_pa] 
</output>
                    </test>
                    <test duration="48" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_edge_count." name="(usair97)" metainfo="test_edge_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count" name="test_avg_edge_count" status="passed">
                    <test duration="176" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(power)" metainfo="test_avg_edge_count[power]" status="passed"/>
                    <test duration="42519" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(roadmap_pa)" metainfo="test_avg_edge_count[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[openflights] 
[gw0] [ 12%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadnet_ca] 
[gw1] [ 13%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadmap_pa] 
</output>
                    </test>
                    <test duration="498" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(openflights)" metainfo="test_avg_edge_count[openflights]" status="passed"/>
                    <test duration="80224" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(roadnet_ca)" metainfo="test_avg_edge_count[roadnet_ca]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadnet_ca] 
</output>
                    </test>
                    <test duration="53" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_edge_count." name="(usair97)" metainfo="test_avg_edge_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength" name="test_avg_strength" status="passed">
                    <test duration="484" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(openflights)" metainfo="test_avg_strength[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 14%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[openflights] 
</output>
                    </test>
                    <test duration="76834" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(roadnet_ca)" metainfo="test_avg_strength[roadnet_ca]" status="passed">
                        <output type="stdout">[gw0] [ 15%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[usair97] 
[gw0] [ 16%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_edge_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[power] 
[gw0] [ 17%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadmap_pa] 
[gw1] [ 18%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadnet_ca] 
</output>
                    </test>
                    <test duration="172" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(power)" metainfo="test_avg_strength[power]" status="passed"/>
                    <test duration="42883" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(roadmap_pa)" metainfo="test_avg_strength[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[usair97] 
[gw1] [ 19%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[power] 
[gw1] [ 20%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[power] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadmap_pa] 
[gw0] [ 21%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_strength[roadmap_pa] 
</output>
                    </test>
                    <test duration="51" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_strength." name="(usair97)" metainfo="test_avg_strength[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count" name="test_component_count" status="passed">
                    <test duration="172" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(power)" metainfo="test_component_count[power]" status="passed"/>
                    <test duration="45810" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(roadmap_pa)" metainfo="test_component_count[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_component_count[openflights] 
[gw0] [ 22%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadnet_ca] 
[gw1] [ 23%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadmap_pa] 
</output>
                    </test>
                    <test duration="537" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(openflights)" metainfo="test_component_count[openflights]" status="passed"/>
                    <test duration="85825" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(roadnet_ca)" metainfo="test_component_count[roadnet_ca]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[power] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[roadnet_ca] 
</output>
                    </test>
                    <test duration="51" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_component_count." name="(usair97)" metainfo="test_component_count[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_properties" name="test_largest_component_properties" status="passed">
                    <test duration="670" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_properties." name="(openflights)" metainfo="test_largest_component_properties[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 24%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[openflights] 
</output>
                    </test>
                    <test duration="280" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_properties." name="(power)" metainfo="test_largest_component_properties[power]" status="passed">
                        <output type="stdout">[gw1] [ 25%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[power] 
</output>
                    </test>
                    <test duration="130236" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_properties." name="(roadnet_ca)" metainfo="test_largest_component_properties[roadnet_ca]" status="passed">
                        <output type="stdout">[gw0] [ 26%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_component_count[usair97] 
[gw0] [ 27%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_component_count[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[power] 
[gw0] [ 28%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_diameter[power] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadnet_ca] 
[gw1] [ 29%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[roadnet_ca] 
</output>
                    </test>
                    <test duration="71892" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_properties." name="(roadmap_pa)" metainfo="test_largest_component_properties[roadmap_pa]" status="passed"/>
                    <test duration="71" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_largest_component_properties." name="(usair97)" metainfo="test_largest_component_properties[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter" name="test_diameter" status="failed">
                    <test duration="81029" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(power)" metainfo="test_diameter[power]" status="passed"/>
                    <test duration="900026" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(roadnet_ca)" metainfo="test_diameter[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[roadmap_pa] 
[gw1] [ 30%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[usair97] 
[gw1] [ 31%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_largest_component_properties[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[power] 
tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:115 (TestGraphProperties.test_diameter[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9a21fed950&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_diameter(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.diameter, int)
tests/test_graph_measures.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:137: in diameter
    self._diameter = diameter(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:281: in diameter
    e = eccentricity(G)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;329236&amp;#39;: {}, &amp;#39;329169&amp;#39;: {}, &amp;#39;329192&amp;#39;: {}, &amp;#39;329242&amp;#39;: {}}))
&amp;gt;   def __iter__(self):
E   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:719: Failed
</output>
                    </test>
                    <test duration="900008" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(roadmap_pa)" metainfo="test_diameter[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadmap_pa] 
[gw0] [ 36%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:115 (TestGraphProperties.test_diameter[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9a18d146d0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_diameter(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.diameter, int)
tests/test_graph_measures.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:137: in diameter
    self._diameter = diameter(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:281: in diameter
    e = eccentricity(G)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AtlasView({&amp;#39;749911&amp;#39;: {}, &amp;#39;750711&amp;#39;: {}, &amp;#39;750755&amp;#39;: {}}), key = &amp;#39;750755&amp;#39;
&amp;gt;   def __getitem__(self, key):
E   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:53: Failed
</output>
                    </test>
                    <test duration="662" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(usair97)" metainfo="test_diameter[usair97]" status="passed"/>
                    <test duration="533" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_diameter." name="(openflights)" metainfo="test_diameter[openflights]" status="failed">
                        <output type="stdout">[gw1] [ 42%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_diameter[openflights] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:115 (TestGraphProperties.test_diameter[openflights])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7ccc2c4b10&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-openflights.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_diameter(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.diameter, int)
tests/test_graph_measures.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:137: in diameter
    self._diameter = diameter(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:281: in diameter
    e = eccentricity(G)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.digraph.DiGraph object at 0x7f7cc8891e50&amp;gt;, v = None
sp = None
    def eccentricity(G, v=None, sp=None):
        &amp;quot;&amp;quot;&amp;quot;Returns the eccentricity of nodes in G.
    
        The eccentricity of a node v is the maximum distance from v to
        all other nodes in G.
    
        Parameters
        ----------
        G : NetworkX graph
           A graph
    
        v : node, optional
           Return value of specified node
    
        sp : dict of dicts, optional
           All pairs shortest path lengths as a dictionary of dictionaries
    
        Returns
        -------
        ecc : dictionary
           A dictionary of eccentricity values keyed by node.
        &amp;quot;&amp;quot;&amp;quot;
    #    if v is None:                # none, use entire graph
    #        nodes=G.nodes()
    #    elif v in G:               # is v a single node
    #        nodes=[v]
    #    else:                      # assume v is a container of nodes
    #        nodes=v
        order = G.order()
    
        e = {}
        for n in G.nbunch_iter(v):
            if sp is None:
                length = nx.single_source_shortest_path_length(G, n)
                L = len(length)
            else:
                try:
                    length = sp[n]
                    L = len(length)
                except TypeError:
                    raise nx.NetworkXError(&amp;#39;Format of &amp;quot;sp&amp;quot; is invalid.&amp;#39;)
            if L != order:
                if G.is_directed():
                    msg = (&amp;#39;Found infinite path length because the digraph is not&amp;#39;
                           &amp;#39; strongly connected&amp;#39;)
                else:
                    msg = (&amp;#39;Found infinite path length because the graph is not&amp;#39;
                           &amp;#39; connected&amp;#39;)
&amp;gt;               raise nx.NetworkXError(msg)
E               networkx.exception.NetworkXError: Found infinite path length because the digraph is not strongly connected
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:246: NetworkXError
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length" name="test_shortest_path_length" status="failed">
                    <test duration="489" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(openflights)" metainfo="test_shortest_path_length[openflights]" status="failed">
                        <output type="stdout">[gw1] [ 32%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[openflights] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:104 (TestGraphProperties.test_shortest_path_length[openflights])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7d1fe5ebd0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-openflights.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_shortest_path_length(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.shortest_path_length, (int, float))
tests/test_graph_measures.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:130: in shortest_path_length
    self._shortest_path_length = average_shortest_path_length(self.graph)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.digraph.DiGraph object at 0x7f7c8a835290&amp;gt;, weight = None
method = &amp;#39;unweighted&amp;#39;
    def average_shortest_path_length(G, weight=None, method=None):
        r&amp;quot;&amp;quot;&amp;quot;Returns the average shortest path length.
    
        The average shortest path length is
    
        .. math::
    
           a =\sum_{s,t \in V} \frac{d(s, t)}{n(n-1)}
    
        where `V` is the set of nodes in `G`,
        `d(s, t)` is the shortest path from `s` to `t`,
        and `n` is the number of nodes in `G`.
    
        Parameters
        ----------
        G : NetworkX graph
    
        weight : None or string, optional (default = None)
           If None, every edge has weight/distance/cost 1.
           If a string, use this edge attribute as the edge weight.
           Any edge attribute not present defaults to 1.
    
        method : string, optional (default = &amp;#39;unweighted&amp;#39; or &amp;#39;djikstra&amp;#39;)
            The algorithm to use to compute the path lengths.
            Supported options are &amp;#39;unweighted&amp;#39;, &amp;#39;dijkstra&amp;#39;, &amp;#39;bellman-ford&amp;#39;,
            &amp;#39;floyd-warshall&amp;#39; and &amp;#39;floyd-warshall-numpy&amp;#39;.
            Other method values produce a ValueError.
            The default method is &amp;#39;unweighted&amp;#39; if `weight` is None,
            otherwise the default method is &amp;#39;dijkstra&amp;#39;.
    
        Raises
        ------
        NetworkXPointlessConcept
            If `G` is the null graph (that is, the graph on zero nodes).
    
        NetworkXError
            If `G` is not connected (or not weakly connected, in the case
            of a directed graph).
    
        ValueError
            If `method` is not among the supported options.
    
        Examples
        --------
        &amp;gt;&amp;gt;&amp;gt; G = nx.path_graph(5)
        &amp;gt;&amp;gt;&amp;gt; nx.average_shortest_path_length(G)
        2.0
    
        For disconnected graphs, you can compute the average shortest path
        length for each component
    
        &amp;gt;&amp;gt;&amp;gt; G = nx.Graph([(1, 2), (3, 4)])
        &amp;gt;&amp;gt;&amp;gt; for C in (G.subgraph(c).copy() for c in connected_components(G)):
        ...     print(nx.average_shortest_path_length(C))
        1.0
        1.0
    
        &amp;quot;&amp;quot;&amp;quot;
        single_source_methods = [&amp;#39;unweighted&amp;#39;,
                                 &amp;#39;dijkstra&amp;#39;,
                                 &amp;#39;bellman-ford&amp;#39;]
        all_pairs_methods = [&amp;#39;floyd-warshall&amp;#39;,
                             &amp;#39;floyd-warshall-numpy&amp;#39;]
        supported_methods = single_source_methods + all_pairs_methods
    
        if method is None:
            method = &amp;#39;unweighted&amp;#39; if weight is None else &amp;#39;dijkstra&amp;#39;
        if method not in supported_methods:
            raise ValueError(&amp;#39;method not supported: {}&amp;#39;.format(method))
    
        n = len(G)
        # For the special case of the null graph, raise an exception, since
        # there are no paths in the null graph.
        if n == 0:
            msg = (&amp;#39;the null graph has no paths, thus there is no average&amp;#39;
                   &amp;#39;shortest path length&amp;#39;)
            raise nx.NetworkXPointlessConcept(msg)
        # For the special case of the trivial graph, return zero immediately.
        if n == 1:
            return 0
        # Shortest path length is undefined if the graph is disconnected.
        if G.is_directed() and not nx.is_weakly_connected(G):
&amp;gt;           raise nx.NetworkXError(&amp;quot;Graph is not weakly connected.&amp;quot;)
E           networkx.exception.NetworkXError: Graph is not weakly connected.
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:403: NetworkXError
</output>
                    </test>
                    <test duration="78309" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(power)" metainfo="test_shortest_path_length[power]" status="passed">
                        <output type="stdout">[gw1] [ 33%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[power] 
</output>
                    </test>
                    <test duration="900015" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(roadnet_ca)" metainfo="test_shortest_path_length[roadnet_ca]" status="failed">
                        <output type="stdout">[gw0] [ 34%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[roadmap_pa] 
[gw1] [ 35%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:104 (TestGraphProperties.test_shortest_path_length[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7c8738f450&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_shortest_path_length(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.shortest_path_length, (int, float))
tests/test_graph_measures.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:130: in shortest_path_length
    self._shortest_path_length = average_shortest_path_length(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in average_shortest_path_length
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in &amp;lt;genexpr&amp;gt;
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:410: in path_length
    return nx.single_source_shortest_path_length(G, v)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:81: in __getitem__
    return AtlasView(self._atlas[name])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = &amp;lt;[AttributeError(&amp;#39;_atlas&amp;#39;) raised in repr()] AtlasView object at 0x7f7cb968be10&amp;gt;
d = {&amp;#39;1810021&amp;#39;: {}, &amp;#39;1810022&amp;#39;: {}, &amp;#39;1810027&amp;#39;: {}}
&amp;gt;   def __init__(self, d):
E   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:44: Failed
</output>
                    </test>
                    <test duration="900004" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(roadmap_pa)" metainfo="test_shortest_path_length[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_diameter[usair97] 
[gw0] [ 37%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_diameter[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[openflights] 
[gw0] [ 38%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[power] 
[gw0] [ 39%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[power] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadnet_ca] 
[gw1] [ 40%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:104 (TestGraphProperties.test_shortest_path_length[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7cb97a7710&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_shortest_path_length(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.shortest_path_length, (int, float))
tests/test_graph_measures.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:130: in shortest_path_length
    self._shortest_path_length = average_shortest_path_length(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in average_shortest_path_length
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:419: in &amp;lt;genexpr&amp;gt;
    s = sum(l for u in G for l in path_length(u).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/generic.py:410: in path_length
    return nx.single_source_shortest_path_length(G, v)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AtlasView({&amp;#39;247444&amp;#39;: {}})
&amp;gt;   def keys(self):
E   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:672: Failed
</output>
                    </test>
                    <test duration="647" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_shortest_path_length." name="(usair97)" metainfo="test_shortest_path_length[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity" name="test_eccentricity" status="failed">
                    <test duration="534" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(openflights)" metainfo="test_eccentricity[openflights]" status="failed">
                        <output type="stderr">tests/test_graph_measures.py:126 (TestGraphProperties.test_eccentricity[openflights])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9acfcc67d0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-openflights.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_eccentricity(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.eccentricity, (int, float))
tests/test_graph_measures.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:144: in eccentricity
    self._eccentricity = max(eccentricity(self.graph).values())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.digraph.DiGraph object at 0x7f9acfcc6ed0&amp;gt;, v = None
sp = None
    def eccentricity(G, v=None, sp=None):
        &amp;quot;&amp;quot;&amp;quot;Returns the eccentricity of nodes in G.
    
        The eccentricity of a node v is the maximum distance from v to
        all other nodes in G.
    
        Parameters
        ----------
        G : NetworkX graph
           A graph
    
        v : node, optional
           Return value of specified node
    
        sp : dict of dicts, optional
           All pairs shortest path lengths as a dictionary of dictionaries
    
        Returns
        -------
        ecc : dictionary
           A dictionary of eccentricity values keyed by node.
        &amp;quot;&amp;quot;&amp;quot;
    #    if v is None:                # none, use entire graph
    #        nodes=G.nodes()
    #    elif v in G:               # is v a single node
    #        nodes=[v]
    #    else:                      # assume v is a container of nodes
    #        nodes=v
        order = G.order()
    
        e = {}
        for n in G.nbunch_iter(v):
            if sp is None:
                length = nx.single_source_shortest_path_length(G, n)
                L = len(length)
            else:
                try:
                    length = sp[n]
                    L = len(length)
                except TypeError:
                    raise nx.NetworkXError(&amp;#39;Format of &amp;quot;sp&amp;quot; is invalid.&amp;#39;)
            if L != order:
                if G.is_directed():
                    msg = (&amp;#39;Found infinite path length because the digraph is not&amp;#39;
                           &amp;#39; strongly connected&amp;#39;)
                else:
                    msg = (&amp;#39;Found infinite path length because the graph is not&amp;#39;
                           &amp;#39; connected&amp;#39;)
&amp;gt;               raise nx.NetworkXError(msg)
E               networkx.exception.NetworkXError: Found infinite path length because the digraph is not strongly connected
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:246: NetworkXError
</output>
                    </test>
                    <test duration="88369" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(power)" metainfo="test_eccentricity[power]" status="passed"/>
                    <test duration="900008" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(roadnet_ca)" metainfo="test_eccentricity[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[usair97] 
[gw1] [ 41%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_shortest_path_length[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_diameter[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:126 (TestGraphProperties.test_eccentricity[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9ad0a1a610&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_eccentricity(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.eccentricity, (int, float))
tests/test_graph_measures.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:144: in eccentricity
    self._eccentricity = max(eccentricity(self.graph).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AtlasView({&amp;#39;56&amp;#39;: {}, &amp;#39;57&amp;#39;: {}, &amp;#39;1064&amp;#39;: {}, &amp;#39;1095&amp;#39;: {}}), key = &amp;#39;56&amp;#39;
    def __getitem__(self, key):
&amp;gt;       return self._atlas[key]
E       Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:54: Failed
</output>
                    </test>
                    <test duration="900011" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(roadmap_pa)" metainfo="test_eccentricity[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadmap_pa] 
[gw0] [ 45%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:126 (TestGraphProperties.test_eccentricity[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9a637cb3d0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_eccentricity(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.eccentricity, (int, float))
tests/test_graph_measures.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:144: in eccentricity
    self._eccentricity = max(eccentricity(self.graph).values())
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/distance_measures.py:231: in eccentricity
    length = nx.single_source_shortest_path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;6299&amp;#39;: {}, &amp;#39;6343&amp;#39;: {}}, &amp;#39;6299&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;6300&amp;#39;: {}, &amp;#39;6334&amp;#39;: {}}, &amp;#39;634...: {}}, &amp;#39;1087535&amp;#39;: {&amp;#39;1087534&amp;#39;: {}}, &amp;#39;1087544&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087545&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087546&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}})
name = &amp;#39;83076&amp;#39;
    def __getitem__(self, name):
&amp;gt;       return AtlasView(self._atlas[name])
E       Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:81: Failed
</output>
                    </test>
                    <test duration="643" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_eccentricity." name="(usair97)" metainfo="test_eccentricity[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency" name="test_global_efficiency" status="failed">
                    <test duration="900018" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(roadnet_ca)" metainfo="test_global_efficiency[roadnet_ca]" status="failed">
                        <output type="stdout">[gw0] [ 43%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[roadmap_pa] 
[gw1] [ 44%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:137 (TestGraphProperties.test_global_efficiency[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7cc89d3f10&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_global_efficiency(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
        if measures.directed:
            with pytest.raises(NotImplementedError):
                measures.global_efficiency
        else:
&amp;gt;           assert isinstance(measures.global_efficiency, float)
tests/test_graph_measures.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:151: in global_efficiency
    self._global_efficiency = global_efficiency(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-302&amp;gt;:2: in global_efficiency
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/efficiency_measures.py:104: in global_efficiency
    for source, targets in lengths:
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:186: in all_pairs_shortest_path_length
    yield (n, length(G, n, cutoff=cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = KeysView(AtlasView({&amp;#39;703564&amp;#39;: {}, &amp;#39;703665&amp;#39;: {}, &amp;#39;703690&amp;#39;: {}}))
    def __iter__(self):
&amp;gt;       yield from self._mapping
E       Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:720: Failed
</output>
                    </test>
                    <test duration="900011" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(roadmap_pa)" metainfo="test_global_efficiency[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[usair97] 
[gw0] [ 46%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_eccentricity[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[openflights] 
[gw0] [ 47%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[power] 
[gw1] [ 48%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:137 (TestGraphProperties.test_global_efficiency[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7cbb81f490&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_global_efficiency(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
        if measures.directed:
            with pytest.raises(NotImplementedError):
                measures.global_efficiency
        else:
&amp;gt;           assert isinstance(measures.global_efficiency, float)
tests/test_graph_measures.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:151: in global_efficiency
    self._global_efficiency = global_efficiency(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-302&amp;gt;:2: in global_efficiency
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/efficiency_measures.py:104: in global_efficiency
    for source, targets in lengths:
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:186: in all_pairs_shortest_path_length
    yield (n, length(G, n, cutoff=cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AtlasView({&amp;#39;466676&amp;#39;: {}, &amp;#39;466674&amp;#39;: {}, &amp;#39;466673&amp;#39;: {}}), key = &amp;#39;466676&amp;#39;
&amp;gt;   def __getitem__(self, key):
E   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:53: Failed
</output>
                    </test>
                    <test duration="522" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(openflights)" metainfo="test_global_efficiency[openflights]" status="failed">
                        <output type="stderr">tests/test_graph_measures.py:137 (TestGraphProperties.test_global_efficiency[openflights])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9acddec810&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-openflights.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_global_efficiency(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
        if measures.directed:
            with pytest.raises(NotImplementedError):
&amp;gt;               measures.global_efficiency
tests/test_graph_measures.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:151: in global_efficiency
    self._global_efficiency = global_efficiency(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-302&amp;gt;:2: in global_efficiency
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
not_implement_for_func = &amp;lt;function global_efficiency at 0x7f9ad1e4edd0&amp;gt;
args = (&amp;lt;networkx.classes.digraph.DiGraph object at 0x7f9acddef510&amp;gt;,)
kwargs = {}, graph = &amp;lt;networkx.classes.digraph.DiGraph object at 0x7f9acddef510&amp;gt;
terms = {&amp;#39;directed&amp;#39;: True, &amp;#39;graph&amp;#39;: True, &amp;#39;multigraph&amp;#39;: False, &amp;#39;undirected&amp;#39;: False}
match = True, t = &amp;#39;directed&amp;#39;, msg = &amp;#39;not implemented for directed type&amp;#39;
    @decorator
    def _not_implemented_for(not_implement_for_func, *args, **kwargs):
        graph = args[0]
        terms = {&amp;#39;directed&amp;#39;: graph.is_directed(),
                 &amp;#39;undirected&amp;#39;: not graph.is_directed(),
                 &amp;#39;multigraph&amp;#39;: graph.is_multigraph(),
                 &amp;#39;graph&amp;#39;: not graph.is_multigraph()}
        match = True
        try:
            for t in graph_types:
                match = match and terms[t]
        except KeyError:
            raise KeyError(&amp;#39;use one or more of &amp;#39;,
                           &amp;#39;directed, undirected, multigraph, graph&amp;#39;)
        if match:
            msg = &amp;#39;not implemented for %s type&amp;#39; % &amp;#39; &amp;#39;.join(graph_types)
&amp;gt;           raise nx.NetworkXNotImplemented(msg)
E           networkx.exception.NetworkXNotImplemented: not implemented for directed type
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:80: NetworkXNotImplemented
</output>
                    </test>
                    <test duration="84941" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(power)" metainfo="test_global_efficiency[power]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[usair97] 
[gw1] [ 49%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[openflights] 
[gw1] [ 50%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[power] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadnet_ca] 
</output>
                    </test>
                    <test duration="624" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_efficiency." name="(usair97)" metainfo="test_global_efficiency[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient" name="test_global_clustering_coefficient" status="passed">
                    <test duration="1024" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(openflights)" metainfo="test_global_clustering_coefficient[openflights]" status="passed"/>
                    <test duration="302" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(power)" metainfo="test_global_clustering_coefficient[power]" status="passed">
                        <output type="stdout">[gw1] [ 51%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[power] 
</output>
                    </test>
                    <test duration="137319" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(roadnet_ca)" metainfo="test_global_clustering_coefficient[roadnet_ca]" status="passed">
                        <output type="stdout">[gw0] [ 52%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_efficiency[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[usair97] 
[gw0] [ 53%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[openflights] 
[gw0] [ 54%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[power] 
[gw0] [ 55%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[power] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadnet_ca] 
[gw0] [ 56%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadmap_pa] 
[gw1] [ 57%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadnet_ca] 
</output>
                    </test>
                    <test duration="74366" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(roadmap_pa)" metainfo="test_global_clustering_coefficient[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[usair97] 
[gw0] [ 59%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[power] 
tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[roadnet_ca] 
</output>
                    </test>
                    <test duration="109" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_global_clustering_coefficient." name="(usair97)" metainfo="test_global_clustering_coefficient[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient" name="test_avg_clustering_coefficient" status="failed">
                    <test duration="78" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(usair97)" metainfo="test_avg_clustering_coefficient[usair97]" status="passed"/>
                    <test duration="1452" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(openflights)" metainfo="test_avg_clustering_coefficient[openflights]" status="failed">
                        <output type="stderr">tests/test_graph_measures.py:163 (TestGraphProperties.test_avg_clustering_coefficient[openflights])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7d1d9eead0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-openflights.graphml&amp;#39;)
expected = 0.396761
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, 0.396761),
        (processed_power, 0.0801036),
        (processed_roadnet_ca, 0.0464684),
        (processed_roadmap_pa, 0.046463),
        (processed_usair97, 0.625217)
    ], ids=ids)
    def test_avg_clustering_coefficient(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isclose(measures.avg_clustering_coefficient, expected, rel_tol=0.015)
E       assert False
E        +  where False = isclose(0.4379998485292385, 0.396761, rel_tol=0.015)
E        +    where 0.4379998485292385 = &amp;lt;graph_measures.GraphMeasures object at 0x7f7c97cbafd0&amp;gt;.avg_clustering_coefficient
tests/test_graph_measures.py:173: AssertionError
</output>
                    </test>
                    <test duration="237" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(power)" metainfo="test_avg_clustering_coefficient[power]" status="passed"/>
                    <test duration="108916" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(roadnet_ca)" metainfo="test_avg_clustering_coefficient[roadnet_ca]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[roadmap_pa] 
[gw0] [ 67%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[usair97] 
[gw0] [ 68%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[power] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadnet_ca] 
</output>
                    </test>
                    <test duration="57346" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_clustering_coefficient." name="(roadmap_pa)" metainfo="test_avg_clustering_coefficient[roadmap_pa]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity" name="test_degree_assortativity" status="passed">
                    <test duration="664" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(openflights)" metainfo="test_degree_assortativity[openflights]" status="passed"/>
                    <test duration="243" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(power)" metainfo="test_degree_assortativity[power]" status="passed"/>
                    <test duration="115452" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(roadnet_ca)" metainfo="test_degree_assortativity[roadnet_ca]" status="passed"/>
                    <test duration="60051" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(roadmap_pa)" metainfo="test_degree_assortativity[roadmap_pa]" status="passed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadmap_pa] 
[gw0] [ 58%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_degree_assortativity[roadmap_pa] 
</output>
                    </test>
                    <test duration="67" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_degree_assortativity." name="(usair97)" metainfo="test_degree_assortativity[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_draw_degree_distribution_diagram" name="test_draw_degree_distribution_diagram" status="passed">
                    <test duration="491" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_draw_degree_distribution_diagram." name="(openflights)" metainfo="test_draw_degree_distribution_diagram[openflights]" status="passed">
                        <output type="stdout">[gw0] [ 60%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[openflights] 
</output>
                    </test>
                    <test duration="169" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_draw_degree_distribution_diagram." name="(power)" metainfo="test_draw_degree_distribution_diagram[power]" status="passed">
                        <output type="stdout">[gw0] [ 61%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[power] 
</output>
                    </test>
                    <test duration="80099" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_draw_degree_distribution_diagram." name="(roadnet_ca)" metainfo="test_draw_degree_distribution_diagram[roadnet_ca]" status="passed">
                        <output type="stdout">[gw1] [ 62%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[usair97] 
[gw1] [ 63%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_global_clustering_coefficient[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[openflights] 
[gw1] [ 64%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[power] 
[gw1] [ 65%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadnet_ca] 
[gw0] [ 66%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_draw_degree_distribution_diagram[roadnet_ca] 
</output>
                    </test>
                    <test duration="45290" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_draw_degree_distribution_diagram." name="(roadmap_pa)" metainfo="test_draw_degree_distribution_diagram[roadmap_pa]" status="passed"/>
                    <test duration="51" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_draw_degree_distribution_diagram." name="(usair97)" metainfo="test_draw_degree_distribution_diagram[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree" name="test_top10_central_degree" status="passed">
                    <test duration="508" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(openflights)" metainfo="test_top10_central_degree[openflights]" status="passed">
                        <output type="stdout">[gw0] [ 69%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[openflights] 
</output>
                    </test>
                    <test duration="173" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(power)" metainfo="test_top10_central_degree[power]" status="passed">
                        <output type="stdout">[gw0] [ 70%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[power] 
</output>
                    </test>
                    <test duration="82281" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(roadnet_ca)" metainfo="test_top10_central_degree[roadnet_ca]" status="passed">
                        <output type="stdout">[gw1] [ 71%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadmap_pa] 
[gw1] [ 72%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_clustering_coefficient[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadmap_pa] 
[gw0] [ 73%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadnet_ca] 
</output>
                    </test>
                    <test duration="44139" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(roadmap_pa)" metainfo="test_top10_central_degree[roadmap_pa]" status="passed"/>
                    <test duration="51" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_degree." name="(usair97)" metainfo="test_top10_central_degree[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness" name="test_top10_central_betweenness" status="failed">
                    <test duration="900002" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(roadmap_pa)" metainfo="test_top10_central_betweenness[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadmap_pa] 
[gw0] [ 74%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[usair97] 
[gw0] [ 75%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_degree[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[openflights] 
[gw0] [ 76%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[power] 
[gw0] [ 77%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[power] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadnet_ca] 
[gw1] [ 78%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:213 (TestGraphProperties.test_top10_central_betweenness[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7d22cecdd0&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_betweenness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       bc = measures.top10_central_betweenness
tests/test_graph_measures.py:223: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:193: in top10_central_betweenness
    bc = betweenness_centrality(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:136: in betweenness_centrality
    S, P, sigma = _single_source_shortest_path_basic(G, s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.graph.Graph object at 0x7f7d1ee2ebd0&amp;gt;, s = &amp;#39;72&amp;#39;
    def _single_source_shortest_path_basic(G, s):
        S = []
        P = {}
        for v in G:
            P[v] = []
        sigma = dict.fromkeys(G, 0.0)    # sigma[v]=0 for v in G
        D = {}
        sigma[s] = 1.0
        D[s] = 0
        Q = [s]
        while Q:   # use BFS to find shortest paths
            v = Q.pop(0)
            S.append(v)
            Dv = D[v]
            sigmav = sigma[v]
            for w in G[v]:
                if w not in D:
&amp;gt;                   Q.append(w)
E                   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:266: Failed
</output>
                    </test>
                    <test duration="49066" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(openflights)" metainfo="test_top10_central_betweenness[openflights]" status="passed"/>
                    <test duration="102451" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(power)" metainfo="test_top10_central_betweenness[power]" status="passed"/>
                    <test duration="900001" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(roadnet_ca)" metainfo="test_top10_central_betweenness[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[openflights] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[power] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:213 (TestGraphProperties.test_top10_central_betweenness[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9a21b7ac10&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_betweenness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       bc = measures.top10_central_betweenness
tests/test_graph_measures.py:223: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:193: in top10_central_betweenness
    bc = betweenness_centrality(self.graph)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:136: in betweenness_centrality
    S, P, sigma = _single_source_shortest_path_basic(G, s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.graph.Graph object at 0x7f9a12a69c90&amp;gt;, s = &amp;#39;29&amp;#39;
    def _single_source_shortest_path_basic(G, s):
        S = []
        P = {}
        for v in G:
            P[v] = []
        sigma = dict.fromkeys(G, 0.0)    # sigma[v]=0 for v in G
        D = {}
        sigma[s] = 1.0
        D[s] = 0
        Q = [s]
        while Q:   # use BFS to find shortest paths
            v = Q.pop(0)
            S.append(v)
            Dv = D[v]
            sigmav = sigma[v]
            for w in G[v]:
                if w not in D:
                    Q.append(w)
                    D[w] = Dv + 1
                if D[w] == Dv + 1:   # this is a shortest path, count paths
                    sigma[w] += sigmav
&amp;gt;                   P[w].append(v)  # predecessors
E                   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:270: Failed
</output>
                    </test>
                    <test duration="621" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_betweenness." name="(usair97)" metainfo="test_top10_central_betweenness[usair97]" status="passed">
                        <output type="stdout">[gw1] [ 79%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[usair97] 
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness" name="test_top10_central_closeness" status="failed">
                    <test duration="40921" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(openflights)" metainfo="test_top10_central_closeness[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 80%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[openflights] 
</output>
                    </test>
                    <test duration="78628" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(power)" metainfo="test_top10_central_closeness[power]" status="passed">
                        <output type="stdout">[gw1] [ 81%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[power] 
</output>
                    </test>
                    <test duration="900039" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(roadnet_ca)" metainfo="test_top10_central_closeness[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadnet_ca] 
[gw0] [ 85%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:229 (TestGraphProperties.test_top10_central_closeness[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9a12acb290&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_closeness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       cc = measures.top10_central_closeness
tests/test_graph_measures.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:201: in top10_central_closeness
    cc = closeness_centrality(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;7&amp;#39;: {}, &amp;#39;383&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;3&amp;#39;: {}, &amp;#39;467&amp;#39;: {}}, &amp;#39;3&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;4&amp;#39;: {}}, &amp;#39;467&amp;#39;:...: {}}, &amp;#39;1956988&amp;#39;: {&amp;#39;1956986&amp;#39;: {}}, &amp;#39;1956998&amp;#39;: {&amp;#39;1956997&amp;#39;: {}}, &amp;#39;1957016&amp;#39;: {&amp;#39;1957015&amp;#39;: {}}, &amp;#39;1957024&amp;#39;: {&amp;#39;1957023&amp;#39;: {}}})
name = &amp;#39;634914&amp;#39;
    def __getitem__(self, name):
&amp;gt;       return AtlasView(self._atlas[name])
E       Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/classes/coreviews.py:81: Failed
</output>
                    </test>
                    <test duration="900001" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(roadmap_pa)" metainfo="test_top10_central_closeness[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadmap_pa] 
[gw0] [ 87%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:229 (TestGraphProperties.test_top10_central_closeness[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f9a1f90d550&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_top10_central_closeness(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       cc = measures.top10_central_closeness
tests/test_graph_measures.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:201: in top10_central_closeness
    cc = closeness_centrality(self.graph)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:92: in _single_shortest_path_length
    nextlevel.update(adj[v])  # add neighbors of v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = AtlasView({&amp;#39;636370&amp;#39;: {}, &amp;#39;636373&amp;#39;: {}, &amp;#39;636372&amp;#39;: {}})
&amp;gt;   def keys(self):
E   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/_collections_abc.py:672: Failed
</output>
                    </test>
                    <test duration="653" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_top10_central_closeness." name="(usair97)" metainfo="test_top10_central_closeness[usair97]" status="passed">
                        <output type="stdout">[gw0] [ 88%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[usair97] 
</output>
                    </test>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality" name="test_avg_closeness_centrality" status="failed">
                    <test duration="40222" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(openflights)" metainfo="test_avg_closeness_centrality[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 82%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[openflights] 
</output>
                    </test>
                    <test duration="77666" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(power)" metainfo="test_avg_closeness_centrality[power]" status="passed">
                        <output type="stdout">[gw0] [ 83%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_top10_central_betweenness[roadnet_ca] 
tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadnet_ca] 
[gw1] [ 84%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[power] 
</output>
                    </test>
                    <test duration="900018" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(roadnet_ca)" metainfo="test_avg_closeness_centrality[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[roadmap_pa] 
[gw1] [ 86%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:245 (TestGraphProperties.test_avg_closeness_centrality[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7d1f746510&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_closeness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_closeness_centrality, float)
tests/test_graph_measures.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:209: in avg_closeness_centrality
    self._avg_closeness_centrality = mean([centrality for centrality in closeness_centrality(self.graph).values()])
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
adj = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;7&amp;#39;: {}, &amp;#39;383&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;3&amp;#39;: {}, &amp;#39;467&amp;#39;: {}}, &amp;#39;3&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;4&amp;#39;: {}}, &amp;#39;467&amp;#39;:...: {}}, &amp;#39;1956988&amp;#39;: {&amp;#39;1956986&amp;#39;: {}}, &amp;#39;1956998&amp;#39;: {&amp;#39;1956997&amp;#39;: {}}, &amp;#39;1957016&amp;#39;: {&amp;#39;1957015&amp;#39;: {}}, &amp;#39;1957024&amp;#39;: {&amp;#39;1957023&amp;#39;: {}}})
firstlevel = {&amp;#39;4145&amp;#39;: 1}, cutoff = inf
    def _single_shortest_path_length(adj, firstlevel, cutoff):
        &amp;quot;&amp;quot;&amp;quot;Yields (node, level) in a breadth first search
    
        Shortest Path Length helper function
        Parameters
        ----------
            adj : dict
                Adjacency dict or view
            firstlevel : dict
                starting nodes, e.g. {source: 1} or {target: 1}
            cutoff : int or float
                level at which we stop the process
        &amp;quot;&amp;quot;&amp;quot;
        seen = {}                  # level (number of hops) when seen in BFS
        level = 0                  # the current level
        nextlevel = firstlevel     # dict of nodes to check at next level
    
        while nextlevel and cutoff &amp;gt;= level:
            thislevel = nextlevel  # advance to next level
            nextlevel = {}         # and start a new list (fringe)
            for v in thislevel:
&amp;gt;               if v not in seen:
E               Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:90: Failed
</output>
                    </test>
                    <test duration="900001" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(roadmap_pa)" metainfo="test_avg_closeness_centrality[roadmap_pa]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_top10_central_closeness[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[openflights] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:245 (TestGraphProperties.test_avg_closeness_centrality[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7cb11af690&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_closeness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_closeness_centrality, float)
tests/test_graph_measures.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:209: in avg_closeness_centrality
    self._avg_closeness_centrality = mean([centrality for centrality in closeness_centrality(self.graph).values()])
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/closeness.py:124: in closeness_centrality
    sp = path_length(G, n)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:66: in single_source_shortest_path_length
    return dict(_single_shortest_path_length(G.adj, nextlevel, cutoff))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
adj = AdjacencyView({&amp;#39;2&amp;#39;: {&amp;#39;1&amp;#39;: {}}, &amp;#39;1&amp;#39;: {&amp;#39;2&amp;#39;: {}, &amp;#39;6299&amp;#39;: {}, &amp;#39;6343&amp;#39;: {}}, &amp;#39;6299&amp;#39;: {&amp;#39;1&amp;#39;: {}, &amp;#39;6300&amp;#39;: {}, &amp;#39;6334&amp;#39;: {}}, &amp;#39;634...: {}}, &amp;#39;1087535&amp;#39;: {&amp;#39;1087534&amp;#39;: {}}, &amp;#39;1087544&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087545&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}, &amp;#39;1087546&amp;#39;: {&amp;#39;1087537&amp;#39;: {}}})
firstlevel = {&amp;#39;126&amp;#39;: 1}, cutoff = inf
    def _single_shortest_path_length(adj, firstlevel, cutoff):
        &amp;quot;&amp;quot;&amp;quot;Yields (node, level) in a breadth first search
    
        Shortest Path Length helper function
        Parameters
        ----------
            adj : dict
                Adjacency dict or view
            firstlevel : dict
                starting nodes, e.g. {source: 1} or {target: 1}
            cutoff : int or float
                level at which we stop the process
        &amp;quot;&amp;quot;&amp;quot;
        seen = {}                  # level (number of hops) when seen in BFS
        level = 0                  # the current level
        nextlevel = firstlevel     # dict of nodes to check at next level
    
        while nextlevel and cutoff &amp;gt;= level:
            thislevel = nextlevel  # advance to next level
            nextlevel = {}         # and start a new list (fringe)
            for v in thislevel:
                if v not in seen:
&amp;gt;                   seen[v] = level  # set the level of vertex v
E                   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/shortest_paths/unweighted.py:91: Failed
</output>
                    </test>
                    <test duration="676" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_closeness_centrality." name="(usair97)" metainfo="test_avg_closeness_centrality[usair97]" status="passed"/>
                </suite>
                <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality" name="test_avg_betweenness_centrality" status="failed">
                    <test duration="59449" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(openflights)" metainfo="test_avg_betweenness_centrality[openflights]" status="passed">
                        <output type="stdout">[gw1] [ 89%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[roadmap_pa] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[usair97] 
[gw1] [ 90%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_closeness_centrality[usair97] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[roadnet_ca] 
[gw0] [ 91%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[openflights] 
</output>
                    </test>
                    <test duration="900058" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(roadnet_ca)" metainfo="test_avg_betweenness_centrality[roadnet_ca]" status="failed">
                        <output type="stdout">tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[power] 
[gw0] [ 92%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[power] 
tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[usair97] 
[gw0] [ 93%] PASSED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[usair97] 
tests/test_utils.py::TestGraphIO::test_load_openflights 
[gw0] [ 94%] PASSED tests/test_utils.py::TestGraphIO::test_load_openflights 
tests/test_utils.py::TestGraphIO::test_load_power 
[gw0] [ 95%] PASSED tests/test_utils.py::TestGraphIO::test_load_power 
tests/test_utils.py::TestGraphIO::test_load_roadnet_ca 
tests/test_utils.py::TestGraphIO::test_load_roadnet_pa 
tests/test_utils.py::TestGraphIO::test_load_usair97 
[gw1] [ 99%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[roadnet_ca] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:256 (TestGraphProperties.test_avg_betweenness_centrality[roadnet_ca])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7bb05a6950&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-CA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_betweenness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_betweenness_centrality, float)
tests/test_graph_measures.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:216: in avg_betweenness_centrality
    self._avg_betweenness_centrality = mean([centrality for centrality in betweenness_centrality(self.graph).values()])
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.graph.Graph object at 0x7f7cc4869f10&amp;gt;, k = None
normalized = True, weight = None, endpoints = False
seed = &amp;lt;random.Random object at 0x5632242c5b70&amp;gt;
    @py_random_state(5)
    @not_implemented_for(&amp;#39;multigraph&amp;#39;)
    def betweenness_centrality(G, k=None, normalized=True, weight=None,
                               endpoints=False, seed=None):
        r&amp;quot;&amp;quot;&amp;quot;Compute the shortest-path betweenness centrality for nodes.
    
        Betweenness centrality of a node $v$ is the sum of the
        fraction of all-pairs shortest paths that pass through $v$
    
        .. math::
    
           c_B(v) =\sum_{s,t \in V} \frac{\sigma(s, t|v)}{\sigma(s, t)}
    
        where $V$ is the set of nodes, $\sigma(s, t)$ is the number of
        shortest $(s, t)$-paths,  and $\sigma(s, t|v)$ is the number of
        those paths  passing through some  node $v$ other than $s, t$.
        If $s = t$, $\sigma(s, t) = 1$, and if $v \in {s, t}$,
        $\sigma(s, t|v) = 0$ [2]_.
    
        Parameters
        ----------
        G : graph
          A NetworkX graph.
    
        k : int, optional (default=None)
          If k is not None use k node samples to estimate betweenness.
          The value of k &amp;lt;= n where n is the number of nodes in the graph.
          Higher values give better approximation.
    
        normalized : bool, optional
          If True the betweenness values are normalized by `2/((n-1)(n-2))`
          for graphs, and `1/((n-1)(n-2))` for directed graphs where `n`
          is the number of nodes in G.
    
        weight : None or string, optional (default=None)
          If None, all edge weights are considered equal.
          Otherwise holds the name of the edge attribute used as weight.
    
        endpoints : bool, optional
          If True include the endpoints in the shortest path counts.
    
        seed : integer, random_state, or None (default)
            Indicator of random number generation state.
            See :ref:`Randomness&amp;lt;randomness&amp;gt;`.
            Note that this is only used if k is not None.
    
        Returns
        -------
        nodes : dictionary
           Dictionary of nodes with betweenness centrality as the value.
    
        See Also
        --------
        edge_betweenness_centrality
        load_centrality
    
        Notes
        -----
        The algorithm is from Ulrik Brandes [1]_.
        See [4]_ for the original first published version and [2]_ for details on
        algorithms for variations and related metrics.
    
        For approximate betweenness calculations set k=#samples to use
        k nodes (&amp;quot;pivots&amp;quot;) to estimate the betweenness values. For an estimate
        of the number of pivots needed see [3]_.
    
        For weighted graphs the edge weights must be greater than zero.
        Zero edge weights can produce an infinite number of equal length
        paths between pairs of nodes.
    
        The total number of paths between source and target is counted
        differently for directed and undirected graphs. Directed paths
        are easy to count. Undirected paths are tricky: should a path
        from &amp;quot;u&amp;quot; to &amp;quot;v&amp;quot; count as 1 undirected path or as 2 directed paths?
    
        For betweenness_centrality we report the number of undirected
        paths when G is undirected.
    
        For betweenness_centrality_subset the reporting is different.
        If the source and target subsets are the same, then we want
        to count undirected paths. But if the source and target subsets
        differ -- for example, if sources is {0} and targets is {1},
        then we are only counting the paths in one direction. They are
        undirected paths but we are counting them in a directed way.
        To count them as undirected paths, each should count as half a path.
    
        References
        ----------
        .. [1] Ulrik Brandes:
           A Faster Algorithm for Betweenness Centrality.
           Journal of Mathematical Sociology 25(2):163-177, 2001.
           http://www.inf.uni-konstanz.de/algo/publications/b-fabc-01.pdf
        .. [2] Ulrik Brandes:
           On Variants of Shortest-Path Betweenness
           Centrality and their Generic Computation.
           Social Networks 30(2):136-145, 2008.
           http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf
        .. [3] Ulrik Brandes and Christian Pich:
           Centrality Estimation in Large Networks.
           International Journal of Bifurcation and Chaos 17(7):2303-2318, 2007.
           http://www.inf.uni-konstanz.de/algo/publications/bp-celn-06.pdf
        .. [4] Linton C. Freeman:
           A set of measures of centrality based on betweenness.
           Sociometry 40: 35–41, 1977
           http://moreno.ss.uci.edu/23.pdf
        &amp;quot;&amp;quot;&amp;quot;
        betweenness = dict.fromkeys(G, 0.0)  # b[v]=0 for v in G
        if k is None:
            nodes = G
        else:
            nodes = seed.sample(G.nodes(), k)
        for s in nodes:
            # single source shortest paths
            if weight is None:  # use BFS
                S, P, sigma = _single_source_shortest_path_basic(G, s)
            else:  # use Dijkstra&amp;#39;s algorithm
                S, P, sigma = _single_source_dijkstra_path_basic(G, s, weight)
            # accumulation
            if endpoints:
                betweenness = _accumulate_endpoints(betweenness, S, P, sigma, s)
            else:
&amp;gt;               betweenness = _accumulate_basic(betweenness, S, P, sigma, s)
E               Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:143: Failed
</output>
                    </test>
                    <test duration="110411" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(power)" metainfo="test_avg_betweenness_centrality[power]" status="passed"/>
                    <test duration="619" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(usair97)" metainfo="test_avg_betweenness_centrality[usair97]" status="passed"/>
                    <test duration="899999" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_graph_measures.TestGraphProperties.test_avg_betweenness_centrality." name="(roadmap_pa)" metainfo="test_avg_betweenness_centrality[roadmap_pa]" status="failed">
                        <output type="stdout">[gw1] [100%] FAILED tests/test_graph_measures.py::TestGraphProperties::test_avg_betweenness_centrality[roadmap_pa] 
</output>
                        <output type="stderr">tests/test_graph_measures.py:256 (TestGraphProperties.test_avg_betweenness_centrality[roadmap_pa])
self = &amp;lt;tests.test_graph_measures.TestGraphProperties object at 0x7f7cc48cf450&amp;gt;
graph_path = PosixPath(&amp;#39;/home/mauro/Workspace/upz_projekt/processed_data/inf-roadNet-PA.graphml&amp;#39;)
expected = None
    @pytest.mark.parametrize(&amp;#39;graph_path, expected&amp;#39;, [
        (processed_openflights, None),
        (processed_power, None),
        (processed_roadnet_ca, None),
        (processed_roadmap_pa, None),
        (processed_usair97, None)
    ], ids=ids)
    def test_avg_betweenness_centrality(self, graph_path: Path, expected):
        measures = GraphMeasures(load_graphml(graph_path))
&amp;gt;       assert isinstance(measures.avg_betweenness_centrality, float)
tests/test_graph_measures.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph_measures.py:216: in avg_betweenness_centrality
    self._avg_betweenness_centrality = mean([centrality for centrality in betweenness_centrality(self.graph).values()])
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-124&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:464: in _random_state
    return func(*new_args, **kwargs)
&amp;lt;/home/mauro/.virtualenvs/upz_projekt/lib/python3.7/site-packages/decorator.py:decorator-gen-123&amp;gt;:2: in betweenness_centrality
    ???
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/utils/decorators.py:82: in _not_implemented_for
    return not_implement_for_func(*args, **kwargs)
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:136: in betweenness_centrality
    S, P, sigma = _single_source_shortest_path_basic(G, s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
G = &amp;lt;networkx.classes.graph.Graph object at 0x7f7d62944690&amp;gt;, s = &amp;#39;50&amp;#39;
    def _single_source_shortest_path_basic(G, s):
        S = []
        P = {}
        for v in G:
            P[v] = []
        sigma = dict.fromkeys(G, 0.0)    # sigma[v]=0 for v in G
        D = {}
        sigma[s] = 1.0
        D[s] = 0
        Q = [s]
        while Q:   # use BFS to find shortest paths
            v = Q.pop(0)
            S.append(v)
            Dv = D[v]
            sigmav = sigma[v]
            for w in G[v]:
                if w not in D:
                    Q.append(w)
                    D[w] = Dv + 1
                if D[w] == Dv + 1:   # this is a shortest path, count paths
                    sigma[w] += sigmav
&amp;gt;                   P[w].append(v)  # predecessors
E                   Failed: Timeout &amp;gt;900.0s
../../.virtualenvs/upz_projekt/lib/python3.7/site-packages/networkx/algorithms/centrality/betweenness.py:270: Failed
</output>
                    </test>
                </suite>
            </suite>
        </suite>
        <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils" name="test_utils" status="passed">
            <suite locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO" name="TestGraphIO" status="passed">
                <test duration="395" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_openflights" name="test_load_openflights" metainfo="test_load_openflights" status="passed"/>
                <test duration="139" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_power" name="test_load_power" metainfo="test_load_power" status="passed"/>
                <test duration="58163" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_roadnet_ca" name="test_load_roadnet_ca" metainfo="test_load_roadnet_ca" status="passed">
                    <output type="stdout">[gw0] [ 96%] PASSED tests/test_utils.py::TestGraphIO::test_load_roadnet_ca 
</output>
                </test>
                <test duration="31153" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_roadnet_pa" name="test_load_roadnet_pa" metainfo="test_load_roadnet_pa" status="passed">
                    <output type="stdout">[gw0] [ 97%] PASSED tests/test_utils.py::TestGraphIO::test_load_roadnet_pa 
</output>
                </test>
                <test duration="59" locationUrl="python&lt;/home/mauro/Workspace/upz_projekt&gt;://tests.test_utils.TestGraphIO.test_load_usair97" name="test_load_usair97" metainfo="test_load_usair97" status="passed">
                    <output type="stdout">[gw0] [ 98%] PASSED tests/test_utils.py::TestGraphIO::test_load_usair97 
</output>
                </test>
            </suite>
        </suite>
    </suite>
</testrun>
